{"version":3,"sources":["redux/todoSlice.ts","Model/MediaQueries.ts","components/TodoList.tsx","components/AddTodo.tsx","assets/Background.jpg","App.tsx","redux/store.ts","index.tsx"],"names":["todoSlice","createSlice","name","initialState","reducers","addTodo","reducer","state","action","push","payload","prepare","content","id","nanoid","completed","removeTodo","index","findIndex","todo","splice","setTodoStatus","actions","size","device","mobileS","mobileM","tablet","laptop","laptopL","Wrapper","styled","div","Div","Ul","ul","Li","li","props","color","Section","section","Button","button","TodoList","todoList","useSelector","dispatch","useDispatch","map","onClick","Form","form","Input","input","AddTodo","useState","todoDescription","setTodoDescription","type","placeholder","value","onChange","e","target","disabled","preventDefault","GlobalStyle","createGlobalStyle","Background","App","store","configureStore","todosReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b311acb.chunk.js","sourcesContent":["import {createSlice, PayloadAction, nanoid} from '@reduxjs/toolkit';\n\nimport {Todo} from \"../Model/Todo\";\n\nconst initialState = [] as Todo[];\n\nconst todoSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        addTodo: {\n            reducer: (state, action: PayloadAction<Todo>) => {\n                state.push(action.payload);\n            },\n            prepare: (content: string) => ({\n                payload: {\n                    id: nanoid(),\n                    content,\n                    completed: false\n                } as Todo,\n            }),\n        },\n        removeTodo(state, action: PayloadAction<string>) {\n            const index = state.findIndex((todo) => todo.id === action.payload);\n            state.splice(index, 1);\n        },\n        setTodoStatus(state, action: PayloadAction<{ completed: boolean, id: string }>) {\n            const index = state.findIndex((todo) => todo.id === action.payload.id);\n            state[index].completed = action.payload.completed\n        },\n    },\n});\n\nexport const {addTodo, removeTodo, setTodoStatus} = todoSlice.actions;\nexport default todoSlice.reducer;","const size= {\n    mobileS: '320px',\n    mobileM: '375px',\n    tablet: '768px',\n    laptop: '1024px',\n    laptopL: '1440px',\n}\n\nexport const device: typeof size = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n};","import React from \"react\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppDispatch, RootState} from \"../redux/store\";\nimport styled from \"styled-components\";\nimport {IoIosCheckmarkCircleOutline, IoIosCloseCircleOutline, IoMdTrash} from \"react-icons/io\";\n\nimport {removeTodo, setTodoStatus} from \"../redux/todoSlice\";\nimport {Todo} from \"../Model/Todo\";\nimport {device} from \"../Model/MediaQueries\";\n\nconst Wrapper = styled.div`\n  font-size: 15px;\n`\n\nconst Div = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-wrap: wrap;\n  text-align: center;\n  margin: 20px 15px;\n  background-color: rgba(77, 77, 77, 0.8);\n  min-width: 300px;\n\n@media${device.mobileM} {\n  min-width: 340px;\n} @media${device.tablet} {\n  min-width: 600px;\n  font-size: 21px;\n} @media${device.laptop} {\n  min-width: 850px;\n  max-width: 90vw;\n  flex-direction: row;\n  justify-content: space-between;\n  font-size: 23px;\n} @media${device.laptopL} {\n  min-width: 20vw;\n  flex-direction: column;\n  justify-content: center;\n  border-radius: 15px 0 30px 0 ;\n`\n\nconst Ul = styled.ul`\n@media${device.laptopL} {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 90vw;\n}\n\n`\nconst Li = styled.li`\n  margin: 13px;\n  list-style: none;\n  color: ${props => props.color};\n  transition: all 0.5s;\n  word-break: break-all;\n`\n\nconst Section = styled.section`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  align-content: space-between;\n\n  h1 {\n    margin: 5px 10px;\n  }\n`\n\nconst Button = styled.button`\n{\n  background-color: ${props => props.color};\n  display: inline-block;\n  padding: 1px 8px;\n  margin: 3px 0;\n  border: 0.16em solid rgba(255, 255, 255, 0);\n  border-radius: 2em;\n  text-decoration: none;\n  text-shadow: 0 0.04em 0.04em rgba(0, 0, 0, 0.35);\n  color: #FFFFFF;\n  letter-spacing: 1px;\n  text-align: center;\n  transition: all 0.5s;\n}\n\n  :hover {\n    border-color: rgba(255, 255, 255, 1);\n  }\n\n@media${device.laptop} {\n  padding: 3px 12px;\n  margin: 3px;\n}\n`\n\nexport const TodoList = ():JSX.Element => {\n    const todoList: Todo [] = useSelector((state: RootState) => state);\n    const dispatch = useDispatch<AppDispatch>();\n\n    return (\n        <Wrapper>\n            <Ul>\n                {todoList.map((todo) => {\n                    return (\n                        <Div key={todo.id}>\n                            <Li color={todo.completed ? \"grey\" : \"white\"}>\n                                {todo.content}\n                            </Li>\n                            <Section>\n                                <Button\n                                    color={todo.completed ? \"green\" : \"grey\"}\n                                    onClick={() => {\n                                        dispatch((setTodoStatus({completed: !todo.completed, id: todo.id})))\n                                    }}\n                                >{todo.completed ?\n                                    <IoIosCheckmarkCircleOutline size={24}/>\n                                    : <IoIosCloseCircleOutline size={24}/>}\n                                </Button>\n                                <h1>|</h1>\n\n                                <Button\n                                    color=\"red\"\n                                    onClick={() => {\n                                        dispatch(removeTodo(todo.id))\n                                    }}><IoMdTrash size={24}/>\n                                </Button>\n                            </Section>\n                        </Div>\n                    )\n                })}\n            </Ul>\n        </Wrapper>\n    );\n};","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {AppDispatch} from \"../redux/store\";\nimport styled from \"styled-components\";\n\nimport {addTodo} from \"../redux/todoSlice\";\nimport {device} from \"../Model/MediaQueries\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  margin: 60px 50px 10px;\n  @media${device.laptop} {\n  flex-direction: row;\n}\n`\n\nconst Input = styled.input`\n  width: 250px;\n  padding: 10px;\n  background: #778C8C;\n  border: black solid 3px;\n  color: white;\n  font-size: 15px;\n\n  &:focus {\n    background: #4B5947;\n  }\n\n  ::placeholder {\n    color: white;\n  }\n\n@media${device.mobileM} {\n  width: 300px;\n} \n@media${device.tablet} {\n  width: 600px;\n  padding: 15px;\n  font-size: 21px;\n}\n  @media${device.laptop}{\n  min-width: 720px;\n}\n`\n\nconst Button = styled.button`\n  margin: 20px 0 5px;\n  padding: 8px;\n  background: #4B5947;\n  border-radius: 7%;\n  color: white;\n  font-size: 15px;\n  font-weight: bold;\n  letter-spacing: 1px;\n  text-transform: uppercase;\n\n  :disabled {\n    opacity: 0.7;\n    color: #778C8C;\n  }\n\n  &:hover {\n    text-shadow: 0 0 6px rgba(255, 255, 255, 1);\n    transition: all 0.3s ease 0s;\n  }\n@media${device.tablet} {\n  font-size: 21px;\n  padding: 12px;\n}\n  @media${device.laptop} {\n  margin: 0 30px;\n  padding: 15px;\n}\n`\n\nexport const AddTodo = (): JSX.Element => {\n    const [todoDescription, setTodoDescription] = useState(\"\");\n    const dispatch = useDispatch<AppDispatch>();\n\n    const setTodoHandler = (e: React.SyntheticEvent): void => {\n        e.preventDefault();\n        dispatch(addTodo(todoDescription));\n        setTodoDescription('');\n    }\n\n    return (\n        <Form>\n            <Input\n                type=\"text\"\n                id=\"task\"\n                name=\"task\"\n                placeholder=\"Enter Your Task\"\n                value={todoDescription}\n                onChange={(e) => setTodoDescription(e.target.value)}\n            />\n            <Button\n                disabled={!todoDescription}\n                onClick={setTodoHandler}\n            >Confirm</Button>\n        </Form>\n    )\n};","export default __webpack_public_path__ + \"static/media/Background.19129817.jpg\";","import React from 'react';\nimport styled, {createGlobalStyle} from \"styled-components\";\n\nimport {TodoList} from \"./components/TodoList\";\nimport {AddTodo} from \"./components/AddTodo\";\nimport Background from './assets/Background.jpg'\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n  }\n  html {\n    height: 100%;\n    width: 100%;\n  }\n  body {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    background-image: url(${Background});\n    background-attachment: fixed;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: cover;\n  }\n`\n\nconst Wrapper = styled.div `\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nfunction App():JSX.Element {\n    return (\n        <Wrapper>\n            <GlobalStyle/>\n            <AddTodo/>\n            <TodoList/>\n        </Wrapper>\n    );\n}\n\nexport default App;","import {configureStore} from '@reduxjs/toolkit';\n\nimport todosReducer from './todoSlice';\n\nexport const store = configureStore({\n    reducer: todosReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\n\nimport App from './App';\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}